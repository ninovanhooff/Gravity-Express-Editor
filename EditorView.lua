---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ninovanhooff.
--- DateTime: 17/08/2022 22:17
---

require("checkerboard")
require("specialsView")


local floor = math.floor
local min = math.min
local gfx  = love.graphics

sideBarWidth = 0
sideBarHeight = 0
bottomBarWidth = 400
bottomBarHeight = 32
local sidebarGutter = 10

function editorTilesX()
    -- reserve width for side
    local width = love.window.getMode() --- first return value is width
    return floor((width - sideBarWidth)/tileSize)
end

function editorTilesY()
    local _,height = love.window.getMode() --- first return value is width
    return floor((height - bottomBarHeight)/tileSize)
end

function getSidebarX()
    return editorTilesX()*tileSize + sidebarGutter
end

--- render a row of bricks, brute force, fail safe
function renderLineHoriz(i,j, drawOffsetY)
    local startI = i
    local endI = min(levelProps.sizeX, camPos[1] + editorTilesX()-1)
    while i<=endI do
        local curBrick = brickT[i]
        if not curBrick then
            break
        end
        curBrick = curBrick[j]
        if not curBrick then
            break
        end

        if curBrick[1]>1 then
            if curBrick[1]>=7 then --concrete
                drawSprite(
                    (i -startI) * 8, drawOffsetY,
                    _,
                    240+curBrick[2]*curBrick[3]*8,
                    greySumT[curBrick[3]]+curBrick[5]*8,
                    8*(curBrick[3]-curBrick[4]),
                    8*(curBrick[3]-curBrick[5])
                )
                i = i + curBrick[3]-curBrick[4]
            elseif curBrick[1]>=3 then --color
                drawSprite(
                    (i -startI) * 8, drawOffsetY,
                    _,
                    (curBrick[1]-3)*48+sumT[curBrick[2]]+curBrick[4]*8,
                    sumT[curBrick[3]]+curBrick[5]*8,
                    (curBrick[2]-curBrick[4])*8,
                    (curBrick[3]-curBrick[5])*8
                )
                i = i + curBrick[2]-curBrick[4]
            elseif curBrick[1]==2 then --collision occupied
                fillRect(
                    (i -startI) * 8,
                    drawOffsetY,
                    (curBrick[2]-curBrick[4])*8,
                    tileSize,
                    red
                )
                i = i + curBrick[2]-curBrick[4]
            end
        else
            i = i + curBrick[2]-curBrick[4]
        end

    end
end

function drawBricks()
    local endY = min(levelProps.sizeY, camPos[2]+editorTilesY())
    for y = camPos[2], endY do
        renderLineHoriz(camPos[1], y, (y - camPos[2])*tileSize)
    end
end

function drawEditor(viewModel)
    gfx.setScissor(0,0,editorTilesX()*tileSize, editorTilesY()*tileSize)
    fillCheckerBoard()
    drawSpecials(camPos)
    drawBricks()
    drawDirectionsIndicator(viewModel)
    -- brush cursor
    drawBrush()
    gfx.setScissor()
    drawBottomBar()
end

function drawDirectionsIndicator(viewModel)
    if viewModel.dragStart and not viewModel.dragStart.directions then
        local thresholdPixels = EditorViewModel.dragDirectionThreshold * tileSize
        local centerX, centerY = curXScreen()+(brushSize*tileSize/2), curYScreen() + (brushSize*tileSize/2)
        local leftX, topY = centerX - thresholdPixels, centerY - thresholdPixels
        local rightX, bottomY = centerX + thresholdPixels, centerY + thresholdPixels
        gfx.line(leftX, topY, rightX, bottomY)
        gfx.line(rightX, topY, leftX, bottomY)
        gfx.line(centerX, topY, centerX, bottomY) -- vertical
        gfx.line(leftX, centerY, rightX, centerY) -- horizontal
    end
end

function drawBottomBar()
    local bottomTexts = {"x: " .. curX .. ", y:" .. curY}
    local brushText = "(.) Brush: "
    if BrushType == CircleBrush then
        brushText = brushText .. "Circle"
    elseif BrushType == SquareBrush then
        brushText = brushText .. "Square"
    end
    table.insert(bottomTexts, brushText)

    table.insert(bottomTexts, "(3-7, 8) Blocktype: " .. blockNames[selBrickType])
    gfx.print(table.concat(bottomTexts, " | "), sidebarGutter, editorTilesY() * tileSize)
    gfx.print(editorStatusMsg, sidebarGutter, editorTilesY() * tileSize + 14)
end
