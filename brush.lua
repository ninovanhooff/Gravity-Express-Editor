---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ninovanhooff.
--- DateTime: 11/06/2022 19:36
---

require("selection")

local function brushToSelection(brush)
    local selection = {}
    brush = brush or curBrush
    for _,item in pairs(brush) do
        table.insert(selection, {curX+item[1], curY + item[2]})
    end
    return selection
end

--- forceSizeZeroBased: 0 for size 1, nil for random size; ie. no forced size
function fillBrush(forceSizeZeroBased, brush, percentProgress)
    fillSelection(forceSizeZeroBased, brushToSelection(brush), percentProgress)
end

function emptyBrush(brush)
    clearSelection(brushToSelection(brush))
end

function SquareBrush(w)
    local brushT = {}
    for i = 0,w-1 do
        for j = 0,w-1 do
            table.insert(brushT,{i,j})
            printf("SquareBrush",i,j)
        end
    end
    BrushType = SquareBrush
    brushVerts = {{white,0,0,0},{white,w*8,0,0},{white,w*8,w*8,0},{white,0,w*8,50},{white,0,0,0}}
    brushSize = w
    return brushT
end

function CircleBrush(w) -- width
    local r = math.floor(w*0.5)
    local brushT = {}
    brushVerts = {}
    for j=r,-r,-1 do
        local lr = math.floor(math.sqrt(r*r-j*j))
        --table.insert(brushVerts,{white,(r-lr)*8,(r-j)*8,0})

        table.insert(brushVerts,{white,(r+lr+1)*8,(r-j)*8,0}) -- right
        table.insert(brushVerts,{white,(r+lr+1)*8,(r-j+1)*8,0}) -- right
        table.insert(brushVerts,1,{white,(r-lr)*8,(r-j)*8,0}) -- left
        table.insert(brushVerts,1,{white,(r-lr)*8,(r-j+1)*8,0}) -- left
        printf("lr",lr)
        for i=r-lr,r+lr do
            table.insert(brushT,{i,r-j})
            printf("circbrushW",i,r-j)
        end
    end
    table.insert(brushVerts,brushVerts[1]) -- cap bottom
    BrushType = CircleBrush
    brushSize = w
    return brushT
end
