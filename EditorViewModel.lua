---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ninovanhooff.
--- DateTime: 18/08/2022 22:56
---

require("object")


local mouse = love.mouse
local floor = math.floor
local min = math.min

class("EditorViewModel").extends()

-- global singleton
if not editorViewModel then
    editorViewModel = EditorViewModel()
end

function EditorViewModel:init()
    EditorViewModel.super.init()
end

function EditorViewModel:update()
    if love.keyboard.isDown(".") then
        -- change brush
        if selBrickType<7 then
            if BrushType==CircleBrush then
                curBrush = SquareBrush(brushSize)
                editorStatusMsg = "brush changed to square"
            else -- paint brush
                curBrush = CircleBrush(brushSize)
                editorStatusMsg = "brush changed to circle"
            end
        else
            editorStatusMsg = "Can only change brush when bricks are selected"
        end
        love.timer.sleep(0.1)
    end

    for i = 3, 7 do
        if love.keyboard.isDown(i) then
            self:setBrickType(i)
            break
        end
    end

    if love.mouse.isDown(1) then
        self:applyBrush()
    elseif love.mouse.isDown(2) then
        emptyBrush()
    end
    if love.mouse.isDown(3) then -- middle mouse button
        if not self.isPanning then
            self.panStart = {
                mouseX = love.mouse.getX(),
                mouseY = love.mouse.getY(),
                camX = camPos[1],
                camY = camPos[2]
            }
            self.isPanning = true
        else
            local panX = floor((mouse.getX() - self.panStart.mouseX)/tileSize)
            local panY = floor((mouse.getY() - self.panStart.mouseY)/tileSize)
            camPos[1] = self.panStart.camX - panX
            camPos[2] = self.panStart.camY - panY
        end
    else
        if self.isPanning then
            self.isPanning = false
        else
            curX = (floor(love.mouse.getX() / tileSize - brushSize/2)) + camPos[1]
            curY = (floor(love.mouse.getY() / tileSize - brushSize/2)) + camPos[2]
        end
    end

    checkX()
    checkY()
end

function EditorViewModel:wheelMoved(_,y)
    if y < 0 then
        -- decrease brush size
        if brushSize>1 and (selBrickType~=7 or brushSize>2) then
            brushSize = brushSize - 1
            if BrushType == CircleBrush then brushSize = brushSize-1 end
            if brushSize==0 then --circle brush
                curBrush = SquareBrush(1)
                brushSize = 1
                BrushType = CircleBrush
            else
                curBrush = BrushType(brushSize)
            end
            if curX>levelProps.sizeX-brushSize then
                curX = levelProps.sizeX-brushSize
            end

            if curY>levelProps.sizeY-brushSize then
                curY = levelProps.sizeY-brushSize
            end
        end
    elseif y > 0 then
        -- increase brush size
        if brushSize<30 and (selBrickType~=7 or brushSize<4) then
            brushSize = brushSize + 1
            if BrushType == CircleBrush then brushSize = brushSize+1 end
            curBrush = BrushType(brushSize)
            print(curX,brushSize,levelProps.sizeX)
            if curX+brushSize>levelProps.sizeX then
                curX = levelProps.sizeX-brushSize+1
            end
            if curY+brushSize>levelProps.sizeY then
                curY = levelProps.sizeY-brushSize+1
            end
        end
    end
end

function EditorViewModel:applyBrush()
    if selBrickType < 7 then -- colors
        fillBrush(0)
    elseif selBrickType == 7 then -- concrete
        local occupied = false
        printf("test ocupied")
        for k=0,brushSize-1 do
            for l=0,brushSize-1 do
                if brickT[curX+k][curY+l][1]~= 0 then
                    occupied = true
                    break
                end
            end
        end
        printf("ocu",occupied)
        if not occupied then
            local pattern = math.random(0,greyMaxT[brushSize])
            for k=0,brushSize-1 do
                for l=0,brushSize-1 do
                    brickT[curX+k][curY+l] = {7,pattern,brushSize,k,l}
                end
            end
        end
        printf("done concrete")
    end
end

function EditorViewModel:setBrickType(idx)
    selBrickType = idx
    if selBrickType==7 then -- concrete
        curBrush = SquareBrush(4)
    elseif selBrickType>7 then
        curBrush = SquareBrush(1)
    end
end

function checkX() --whether curX and camPos[1] are in bounds
    local editorSizeX = editorTilesX()

    camPos[1] = lume.clamp(camPos[1], 1, levelProps.sizeX - editorSizeX)

    if curX<1 then curX=1 end
    if camPos[1]<1 then camPos[1]=1 end

    if curX<camPos[1] then curX = camPos[1] end
    if curX>levelProps.sizeX-brushSize then
        curX = levelProps.sizeX-brushSize+1
    end

end

function checkY()
    local editorSizeY = editorTilesY()

    camPos[2] = lume.clamp(camPos[2], 1, levelProps.sizeY - editorSizeY)

    if curY<1 then curY=1 end
    if camPos[2]<1 then camPos[2]=1 end

    if curY<camPos[2] then curY = camPos[2] end
    if curY>levelProps.sizeY-brushSize then
        curY = levelProps.sizeY-brushSize+1
    end
end
